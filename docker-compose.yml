version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: mct_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      # Persist data to "postgrest_data" volume
      - postgres_data:/var/lib/postgresql/data
      # Mounts "migrations" folder into the container so SQL files run automatically on first boot
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    # API service waits for this to pass before starting
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      # Persist data to "redis_data" volume
      - redis_data:/data
    healthcheck:
      # Check if Redis is ready by sending a PING command
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    # Build the API service from the Dockerfile in the current directory
    build: .
    ports:
      - "8080:8080"
    # Wait for both Postgres and Redis to be healthy before starting the API service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Environment variables for the API service
    environment:
      ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: mct_api
      DB_SSLMODE: disable
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      JWT_SECRET: dev_jwt_secret_key
      PORT: 8080
    # Mount the current directory into the container for live development
    volumes:
      - .:/app
    # Start this service only with this command
    # docker compose --profile full-stack up
    profiles:
      - full-stack

volumes:
  postgres_data:
  redis_data:
